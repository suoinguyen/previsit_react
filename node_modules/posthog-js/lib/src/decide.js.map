{"version":3,"file":"decide.js","sourceRoot":"","sources":["../../src/decide.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from './posthog-core'\nimport { Compression, DecideResponse } from './types'\nimport { STORED_GROUP_PROPERTIES_KEY, STORED_PERSON_PROPERTIES_KEY } from './constants'\n\nimport { logger } from './utils/logger'\nimport { document } from './utils/globals'\n\nexport class Decide {\n    constructor(private readonly instance: PostHog) {\n        // don't need to wait for `decide` to return if flags were provided on initialisation\n        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags()\n    }\n\n    call(): void {\n        /*\n        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.\n        */\n        const data = {\n            token: this.instance.config.token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            person_properties: this.instance.get_property(STORED_PERSON_PROPERTIES_KEY),\n            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),\n            disable_flags:\n                this.instance.config.advanced_disable_feature_flags ||\n                this.instance.config.advanced_disable_feature_flags_on_first_load ||\n                undefined,\n        }\n\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data,\n            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => this.parseDecideResponse(response.json as DecideResponse | undefined),\n        })\n    }\n\n    parseDecideResponse(response?: DecideResponse): void {\n        this.instance.featureFlags.setReloadingPaused(false)\n        // :TRICKY: Reload - start another request if queued!\n        this.instance.featureFlags._startReloadTimer()\n\n        const errorsLoading = !response\n\n        if (\n            !this.instance.config.advanced_disable_feature_flags_on_first_load &&\n            !this.instance.config.advanced_disable_feature_flags\n        ) {\n            this.instance.featureFlags.receivedFeatureFlags(response ?? {}, errorsLoading)\n        }\n\n        if (errorsLoading) {\n            logger.error('Failed to fetch feature flags from PostHog.')\n            return\n        }\n        if (!(document && document.body)) {\n            logger.info('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this.parseDecideResponse(response)\n            }, 500)\n            return\n        }\n\n        this.instance._afterDecideResponse(response)\n    }\n}\n"]}