import { Compression } from './types';
import { STORED_GROUP_PROPERTIES_KEY, STORED_PERSON_PROPERTIES_KEY } from './constants';
import { logger } from './utils/logger';
import { document } from './utils/globals';
var Decide = /** @class */ (function () {
    function Decide(instance) {
        this.instance = instance;
        // don't need to wait for `decide` to return if flags were provided on initialisation
        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags();
    }
    Decide.prototype.call = function () {
        var _this = this;
        /*
        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.
        */
        var data = {
            token: this.instance.config.token,
            distinct_id: this.instance.get_distinct_id(),
            groups: this.instance.getGroups(),
            person_properties: this.instance.get_property(STORED_PERSON_PROPERTIES_KEY),
            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),
            disable_flags: this.instance.config.advanced_disable_feature_flags ||
                this.instance.config.advanced_disable_feature_flags_on_first_load ||
                undefined,
        };
        this.instance._send_request({
            method: 'POST',
            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),
            data: data,
            compression: this.instance.config.disable_compression ? undefined : Compression.Base64,
            timeout: this.instance.config.feature_flag_request_timeout_ms,
            callback: function (response) { return _this.parseDecideResponse(response.json); },
        });
    };
    Decide.prototype.parseDecideResponse = function (response) {
        var _this = this;
        this.instance.featureFlags.setReloadingPaused(false);
        // :TRICKY: Reload - start another request if queued!
        this.instance.featureFlags._startReloadTimer();
        var errorsLoading = !response;
        if (!this.instance.config.advanced_disable_feature_flags_on_first_load &&
            !this.instance.config.advanced_disable_feature_flags) {
            this.instance.featureFlags.receivedFeatureFlags(response !== null && response !== void 0 ? response : {}, errorsLoading);
        }
        if (errorsLoading) {
            logger.error('Failed to fetch feature flags from PostHog.');
            return;
        }
        if (!(document && document.body)) {
            logger.info('document not ready yet, trying again in 500 milliseconds...');
            setTimeout(function () {
                _this.parseDecideResponse(response);
            }, 500);
            return;
        }
        this.instance._afterDecideResponse(response);
    };
    return Decide;
}());
export { Decide };
//# sourceMappingURL=decide.js.map